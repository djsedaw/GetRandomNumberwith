{
  "firstLayout": "",
  "gdVersion": {
    "build": 99,
    "major": 4,
    "minor": 0,
    "revision": 0
  },
  "properties": {
    "adaptGameResolutionAtRuntime": true,
    "antialiasingMode": "MSAA",
    "antialisingEnabledOnMobile": false,
    "folderProject": false,
    "orientation": "landscape",
    "packageName": "com.example.gamename",
    "pixelsRounding": false,
    "projectUuid": "c56fd1c3-01d2-49d7-b6a5-f2db9442c252",
    "scaleMode": "linear",
    "sizeOnStartupMode": "adaptWidth",
    "templateSlug": "",
    "useExternalSourceFiles": false,
    "version": "1.0.0",
    "name": "GetRndRange",
    "description": "",
    "author": "",
    "windowWidth": 1280,
    "windowHeight": 720,
    "latestCompilationDirectory": "",
    "maxFPS": 60,
    "minFPS": 20,
    "verticalSync": false,
    "platformSpecificAssets": {},
    "loadingScreen": {
      "backgroundColor": 0,
      "backgroundFadeInDuration": 0.2,
      "backgroundImageResourceName": "",
      "gdevelopLogoStyle": "light",
      "logoAndProgressFadeInDuration": 0.2,
      "logoAndProgressLogoFadeInDelay": 0,
      "minDuration": 1.5,
      "progressBarColor": 16777215,
      "progressBarHeight": 20,
      "progressBarMaxWidth": 200,
      "progressBarMinWidth": 40,
      "progressBarWidthPercent": 30,
      "showGDevelopSplash": true,
      "showProgressBar": true
    },
    "watermark": {
      "placement": "bottom-left",
      "showWatermark": true
    },
    "authorIds": [],
    "authorUsernames": [],
    "categories": [],
    "playableDevices": [],
    "extensionProperties": [],
    "platforms": [
      {
        "name": "GDevelop JS platform"
      }
    ],
    "currentPlatform": "GDevelop JS platform"
  },
  "resources": {
    "resources": [],
    "resourceFolders": []
  },
  "objects": [],
  "objectsFolderStructure": {
    "folderName": "__ROOT"
  },
  "objectsGroups": [],
  "variables": [],
  "layouts": [
    {
      "b": 209,
      "disableInputWhenNotFocused": true,
      "mangledName": "Untitled_32scene",
      "name": "Untitled scene",
      "r": 209,
      "standardSortMethod": true,
      "stopSoundsOnStartup": true,
      "title": "",
      "v": 209,
      "uiSettings": {
        "grid": false,
        "gridType": "rectangular",
        "gridWidth": 32,
        "gridHeight": 32,
        "gridOffsetX": 0,
        "gridOffsetY": 0,
        "gridColor": 10401023,
        "gridAlpha": 0.8,
        "snap": false,
        "zoomFactor": 0.546875,
        "windowMask": false
      },
      "objectsGroups": [],
      "variables": [],
      "instances": [
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "keepRatio": true,
          "layer": "",
          "name": "Randreturnval",
          "persistentUuid": "74db9b2e-ba68-47dd-bf65-d38289364297",
          "width": 0,
          "x": 556,
          "y": 260,
          "zOrder": 1,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        }
      ],
      "objects": [
        {
          "assetStoreId": "",
          "bold": false,
          "italic": false,
          "name": "Randreturnval",
          "smoothed": true,
          "type": "TextObject::Text",
          "underlined": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "string": "Text",
          "font": "",
          "textAlignment": "left",
          "characterSize": 40,
          "color": {
            "b": 10,
            "g": 10,
            "r": 243
          },
          "content": {
            "bold": false,
            "isOutlineEnabled": false,
            "isShadowEnabled": false,
            "italic": false,
            "outlineColor": "255;255;255",
            "outlineThickness": 2,
            "shadowAngle": 90,
            "shadowBlurRadius": 2,
            "shadowColor": "0;0;0",
            "shadowDistance": 4,
            "shadowOpacity": 127,
            "smoothed": true,
            "underlined": false,
            "text": "Text",
            "font": "",
            "textAlignment": "left",
            "characterSize": 40,
            "color": "243;10;10"
          }
        }
      ],
      "objectsFolderStructure": {
        "folderName": "__ROOT",
        "children": [
          {
            "objectName": "Randreturnval"
          }
        ]
      },
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "AnyKeyPressed"
              },
              "parameters": [
                ""
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "ModVarScene"
              },
              "parameters": [
                "min",
                "=",
                "1"
              ]
            },
            {
              "type": {
                "value": "ModVarScene"
              },
              "parameters": [
                "max",
                "=",
                "10"
              ]
            },
            {
              "type": {
                "value": "ModVarScene"
              },
              "parameters": [
                "minGap",
                "=",
                "8"
              ]
            },
            {
              "type": {
                "value": "ModVarScene"
              },
              "parameters": [
                "maxGap",
                "=",
                "10"
              ]
            },
            {
              "type": {
                "value": "ModVarScene"
              },
              "parameters": [
                "RandReturn",
                "=",
                "GetRndRangewithGap::GetRndRanG(Variable(min), Variable(max), Variable(minGap), Variable(maxGap))"
              ]
            },
            {
              "type": {
                "value": "TextContainerCapability::TextContainerBehavior::SetValue"
              },
              "parameters": [
                "Randreturnval",
                "Text",
                "=",
                "VariableString(GetRandReturnnumber)"
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "VarScene"
              },
              "parameters": [
                "RandReturn",
                "=",
                "0"
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "TextContainerCapability::TextContainerBehavior::SetValue"
              },
              "parameters": [
                "Randreturnval",
                "Text",
                "=",
                "\"Error\""
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": []
        }
      ],
      "layers": [
        {
          "ambientLightColorB": 200,
          "ambientLightColorG": 200,
          "ambientLightColorR": 200,
          "camera3DFarPlaneDistance": 10000,
          "camera3DFieldOfView": 45,
          "camera3DNearPlaneDistance": 3,
          "cameraType": "",
          "followBaseLayerCamera": false,
          "isLightingLayer": false,
          "isLocked": false,
          "name": "",
          "renderingType": "",
          "visibility": true,
          "cameras": [
            {
              "defaultSize": true,
              "defaultViewport": true,
              "height": 0,
              "viewportBottom": 1,
              "viewportLeft": 0,
              "viewportRight": 1,
              "viewportTop": 0,
              "width": 0
            }
          ],
          "effects": [
            {
              "effectType": "Scene3D::HemisphereLight",
              "name": "3D Light",
              "doubleParameters": {
                "elevation": 45,
                "intensity": 1,
                "rotation": 0
              },
              "stringParameters": {
                "groundColor": "64;64;64",
                "skyColor": "255;255;255",
                "top": "Y-"
              },
              "booleanParameters": {}
            }
          ]
        }
      ],
      "behaviorsSharedData": [
        {
          "name": "Effect",
          "type": "EffectCapability::EffectBehavior"
        },
        {
          "name": "Opacity",
          "type": "OpacityCapability::OpacityBehavior"
        },
        {
          "name": "Scale",
          "type": "ScalableCapability::ScalableBehavior"
        },
        {
          "name": "Text",
          "type": "TextContainerCapability::TextContainerBehavior"
        }
      ]
    }
  ],
  "externalEvents": [],
  "eventsFunctionsExtensions": [
    {
      "author": "",
      "category": "",
      "extensionNamespace": "",
      "fullName": "",
      "helpPath": "",
      "iconUrl": "",
      "name": "GetRndRangewithGap",
      "previewIconUrl": "",
      "shortDescription": "",
      "version": "",
      "description": "",
      "tags": [],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [
        {
          "description": "getRandomNumberWithGap",
          "fullName": "GetRandomNumberWithGap",
          "functionType": "Expression",
          "name": "GetRndRanG",
          "sentence": "getRandomNumberWithGap",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "runtimeScene.setBackgroundColor(100,100,240);",
                "",
                "function getRandomNumberWithGap(min, max, excludeStart, excludeEnd) {",
                "    // Check if the exclude range is within the min and max range",
                "    if (excludeStart < min || excludeEnd > max) {",
                "        console.error(\"Error: Exclusion range is out of bounds\");",
                "        return null;",
                "    }",
                "",
                "    // Create an array to hold the valid numbers",
                "    let validNumbers = [];",
                "",
                "    // Populate the array with numbers excluding the specified gap",
                "    for (let i = min; i <= max; i++) {",
                "        if (i < excludeStart || i > excludeEnd) {",
                "            validNumbers.push(i);",
                "        }",
                "    }",
                "",
                "    // Check if there are any valid numbers left",
                "    if (validNumbers.length === 0) {",
                "        console.error(\"Error: No valid numbers available\");",
                "        return null;",
                "    }",
                "",
                "    // Pick a random number from the valid numbers",
                "    let randomIndex = Math.floor(Math.random() * validNumbers.length);",
                "    return validNumbers[randomIndex];",
                "}",
                "",
                "// Example usage",
                "let min = eventsFunctionContext.getArgument(\"min\");",
                "let max = eventsFunctionContext.getArgument(\"max\");",
                "let excludeStart = eventsFunctionContext.getArgument(\"gapmin\");",
                "let excludeEnd = eventsFunctionContext.getArgument(\"gapmax\");",
                "",
                "let randomNumber = getRandomNumberWithGap(min, max, excludeStart, excludeEnd);",
                "",
                "if (randomNumber !== null) {",
                "    console.log(\"Random number:\", randomNumber);",
                "}",
                "runtimeScene.getVariables().get(\"GetRandReturnnumber\").setNumber(randomNumber);"
              ],
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": true
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Variable(GetRandReturnnumber)"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Min range value",
              "name": "min",
              "type": "expression"
            },
            {
              "description": "Max range value",
              "name": "max",
              "type": "expression"
            },
            {
              "description": "Start of Gap range",
              "name": "gapmin",
              "type": "expression"
            },
            {
              "description": "End of Gap range",
              "name": "gapmax",
              "type": "expression"
            }
          ],
          "objectGroups": []
        }
      ],
      "eventsBasedBehaviors": [],
      "eventsBasedObjects": []
    }
  ],
  "externalLayouts": [],
  "externalSourceFiles": []
}